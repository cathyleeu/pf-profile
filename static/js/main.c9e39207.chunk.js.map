{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["InnerCircleText","props","react_default","a","createElement","className","text","InnerCircleEl","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isHandleClick","e","preventDefault","console","log","setState","edit","state","isHandleChange","target","value","isDispatchStatus","name","slide","editStatus","true","fadeTitle","fadeInput","innerText","false","_this$editStatus$this","concat","onClick","App_InnerCircleEl","App_InnerCircleText","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAIMA,SAAkB,SAACC,GAEvB,OACEC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBACRJ,EAAMK,QAKTC,EAAgB,SAACN,GAMrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEZJ,EAAMO,YAwEAC,cAjEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAqBFI,cAAgB,SAACC,GACfA,EAAEC,iBACFC,QAAQC,IAAI,WACZX,EAAKY,SAAS,CACZC,MAAQb,EAAKc,MAAMD,QA1BTb,EA6Bde,eAAiB,SAACP,GAChBA,EAAEC,iBACFC,QAAQC,IAAIH,EAAEQ,OAAOC,QA/BTjB,EAkCdkB,iBAAmB,SAACJ,GAGlBJ,QAAQC,IAAIG,IAnCZd,EAAKc,MAAQ,CACXK,KAAO,GACPN,MAAO,EACPO,MAAO,IAETpB,EAAKqB,WAAa,CAChBC,KAAO,CACLF,MAAU,aACVG,UAAc,WACdC,UAAc,UACdC,UAAc,SAEhBC,MAAQ,CACNN,MAAU,WACVG,UAAc,UACdC,UAAc,WACdC,UAAc,SAlBNzB,wEAuCL,IAAA2B,EAC0CxB,KAAKkB,WAAWlB,KAAKW,MAAMD,MAAtEO,EADCO,EACDP,MAAOG,EADNI,EACMJ,UAAWC,EADjBG,EACiBH,UAAWC,EAD5BE,EAC4BF,UACnC,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,cAAAiC,OAAgBR,EAAhB,KAAAQ,OAAyBL,IAArC,qBACA/B,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cAAAiC,OAAgBR,GAASS,QAAS1B,KAAKI,eACnDf,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,CAAiBnC,KAAM6B,KAEzBjC,EAAAC,EAAAC,cAAA,OACEC,UAAS,cAAAiC,OAAgBR,EAAhB,KAAAQ,OAAyBJ,IAClChC,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,SACEsC,KAAK,OACLC,YAAY,kBACZC,SAAU/B,KAAKY,eACfE,MAAOd,KAAKW,MAAMK,iBAzDdgB,aCjBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c9e39207.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\n\n\nconst InnerCircleText = (props) => {\n  // {this.state.editStatus ? \"Photo\" : \"Edit\" }\n  return (\n    <p className=\"circle-inner-text\">\n        {props.text}\n    </p>\n  )\n}\n\nconst InnerCircleEl = (props) => {\n  // inner-circle -> inner-select (box)\n  let classStyle = {\n    \"props\" : {\n    }\n  }\n  return (\n    <div className=\"inner-circle-border\">\n      <div className=\"inner-circle\">\n        {/* photo space */}\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      name : \"\",\n      edit : false,\n      slide: \"\" \n    }\n    this.editStatus = {\n      true : {\n        \"slide\" : \"edit-start\",\n        \"fadeTitle\" : \"fade-out\",\n        \"fadeInput\" : \"fade-in\",\n        \"innerText\" : \"Photo\"\n      },\n      false : {\n        \"slide\" : \"edit-end\",\n        \"fadeTitle\" : \"fade-in\",\n        \"fadeInput\" : \"fade-out\",\n        \"innerText\" : \"Edit\"\n      }\n    } \n  }\n  isHandleClick = (e) => {\n    e.preventDefault();\n    console.log(\"clicked\")\n    this.setState({\n      edit : !this.state.edit,\n    })\n  }\n  isHandleChange = (e) => {\n    e.preventDefault();\n    console.log(e.target.value);\n    \n  }\n  isDispatchStatus = (state) => {\n    // edit -> photo\n    // photo -> modal choose (사각으로 변신) \n    console.log(state);\n  }\n  render() {\n    let { slide, fadeTitle, fadeInput, innerText } = this.editStatus[this.state.edit];\n    return (\n      <div className=\"App\">\n        <div className=\"edit-component\">\n          <p className={`title-cont ${slide} ${fadeTitle}`}>Edit Your Profile</p>\n          <div className={`image-cont ${slide}`} onClick={this.isHandleClick}>\n            <InnerCircleEl />\n            <InnerCircleText text={innerText}/>\n          </div>\n          <div \n            className={`input-cont ${slide} ${fadeInput}`}>\n            <p>name</p>\n            <input \n              type=\"text\" \n              placeholder=\"Write Your Name\"\n              onChange={this.isHandleChange}\n              value={this.state.name}\n              />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}